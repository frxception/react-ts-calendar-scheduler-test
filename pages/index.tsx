import React, { FC, useState } from 'react';
import Head from 'next/head';
import FullCalendar, { EventApi, DateSelectArg, EventClickArg, EventContentArg, formatDate } from '@fullcalendar/react'
import dayGridPlugin from '@fullcalendar/daygrid'
import timeGridPlugin from '@fullcalendar/timegrid'
import interactionPlugin from '@fullcalendar/interaction'
import { BsFillCalendarFill, BsChatSquareQuoteFill, BsExclamationSquareFill,
  BsChatSquareDotsFill, BsFillArchiveFill, BsFillEnvelopeFill, BsFillInfoSquareFill, BsExclamationTriangleFill
 } from "react-icons/bs";

import CustomFooter from '@src/components/Footer'
import styles from '@styles/Home.module.css'
import { createEventId, INITIAL_EVENTS } from '@src/utils/event';
import SideBar from '@src/components/SideBar';

// @ts-ignore
interface Props  {
  weekendsVisible: Boolean;
  currentEvents: EventApi[];
}

// @ts-ignore
const Home:FC<Props> = (props) => {
  const [weekendsVisible, setWeekendsVisible] = useState(true);
  const [currentEvents, setCurrentEvents] = useState<EventApi[]>([]);

  const renderEventContent = (eventContent: EventContentArg) => {
  // @ts-ignore
  const iconName = eventContent.event.extendedProps.iconName;
    
  const txtTime = () => {
    if(eventContent.view.type === 'dayGridMonth'){
      let timeTxt = eventContent.timeText + '';
      console.log(">>>>TIME: timeTxt: ", timeTxt)
      if (timeTxt.includes('a')) {
        return timeTxt.replaceAll('a', 'am')
      }else
      if (timeTxt.includes('p')) {
        return timeTxt.replaceAll('p', 'pm')
      }
    }
    
    return eventContent.timeText;
  }
    return (
      <>  
        { iconName === 'BsFillCalendarFill' ? <BsFillCalendarFill size={30} className={styles.fcEventIcon}/> : ""}
        { iconName === 'BsChatSquareQuoteFill' ? <BsChatSquareQuoteFill size={30} className={styles.fcEventIcon}/> : ""}
        { iconName === 'BsExclamationSquareFill' ? <BsExclamationSquareFill size={30} className={styles.fcEventIcon}/> : ""}
        {iconName === 'BsChatSquareDotsFill' ? <BsChatSquareDotsFill size={30} className={styles.fcEventIcon}/> : ""}
        {iconName === 'BsFillArchiveFill' ? <BsFillArchiveFill size={30} className={styles.fcEventIcon}/> : ""}
        {iconName === 'BsFillEnvelopeFill' ? <BsFillEnvelopeFill size={30} className={styles.fcEventIcon}/> : ""}
        {iconName === 'BsFillInfoSquareFill' ? <BsFillInfoSquareFill size={30} className={styles.fcEventIcon}/> : ""}
        {iconName === 'BsExclamationTriangleFill' ? <BsExclamationTriangleFill size={30} className={styles.fcEventIcon}/> : ""}
        
        <b style={{color:'white'}}>&nbsp;{txtTime()}&nbsp;</b>
        <span>{eventContent.event.title}</span>

      </>
    )
  }
  

  const handleEventClick = (clickInfo: EventClickArg) => {
    if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {
      clickInfo.event.remove()
    }
  }

  const handleEvents = (events: EventApi[]) => {
    setCurrentEvents(events);
  }

  
  const handleWeekendsToggle = () => {
    setWeekendsVisible(!weekendsVisible)
  }


  const handleDateSelect = (selectInfo: DateSelectArg) => {
    let title = prompt('Please enter a new title for your event')
    let calendarApi = selectInfo.view.calendar

    calendarApi.unselect() // clear date selection

    const colors: string[] = [ 'blue', 'green', 'orange', 'purple', 'red', 'yellow', 'cyan'];
    const randColorIdx = Math.floor(Math.random() * 7);
    if (title) {
      calendarApi.addEvent({ 
        id: createEventId(),
        title,
        start: selectInfo.startStr,
        end: selectInfo.endStr,
        allDay: selectInfo.allDay,
        className: `fc-v-event-${colors[randColorIdx]}`,
        iconName: 'BsExclamationTriangleFill'
      })
    }
  }


  return (
    
    <>
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>


          <div className={styles.demoApp}>
            <SideBar weekendsVisible={weekendsVisible} currentEvents={currentEvents} 
              handleWeekendsToggle={handleWeekendsToggle}/>
              
            <div className={styles.demoAppMain}>
                <FullCalendar
                  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}
                  headerToolbar={{
                    left: 'prev,next today',
                    right: 'title',
                    center: 'dayGridMonth,timeGridWeek,timeGridDay'
                  }}
                  initialView='timeGridWeek'
                  eventContent={renderEventContent} // custom render function
                  editable={true}
                  selectable={true}
                  selectMirror={true}
                  dayMaxEvents={true}
                  eventBackgroundColor="rgb(53, 53, 53)"
                  eventBorderColor="rgb(75, 75, 75)"
                  eventTextColor="rgb(171, 171, 171)"
                  weekends={weekendsVisible}
                  initialEvents={INITIAL_EVENTS} 
                  select={handleDateSelect}
                  eventClick={handleEventClick}
                  eventsSet={handleEvents} 
                  allDaySlot={false}
                  scrollTime={1000}
                  // dayHeaderFormat={{ weekday: 'short', month: 'numeric', day: 'numeric', 
                  // omitCommas: true, omitZeroMinute: true }}
                  nowIndicator={true}
                  slotLaneClassNames="slot_height_hours"
                  eventMinHeight={100}
                  
                />
              </div>
          </div>

        

        </main>


        <CustomFooter />
         
      </div>
    </>
  )
}


export default Home;